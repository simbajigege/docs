"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[28771],{40546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(74848),i=n(28453);const a={title:"Room Metadata",description:"All metadata pertaining to a meeting.",sidebar_position:11,tags:["web-core","room-metadata"]},r="Room Metadata",s={id:"room-metadata",title:"Room Metadata",description:"All metadata pertaining to a meeting.",source:"@site/docs/web-core/room-metadata.mdx",sourceDirName:".",slug:"/room-metadata",permalink:"/docs/web-core/room-metadata",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/web-core/room-metadata.mdx",tags:[{label:"web-core",permalink:"/docs/web-core/tags/web-core"},{label:"room-metadata",permalink:"/docs/web-core/tags/room-metadata"}],version:"current",lastUpdatedAt:1711302110,formattedLastUpdatedAt:"Mar 24, 2024",sidebarPosition:11,frontMatter:{title:"Room Metadata",description:"All metadata pertaining to a meeting.",sidebar_position:11,tags:["web-core","room-metadata"]},sidebar:"tutorialSidebar",previous:{title:"Livestreaming",permalink:"/docs/web-core/livestreaming"},next:{title:"Debug System Error Codes",permalink:"/docs/web-core/error-codes/error-code"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"room-metadata",children:"Room Metadata"}),"\n",(0,o.jsxs)(t.p,{children:["All metadata pertaining to a meeting is stored in ",(0,o.jsx)(t.code,{children:"meeting.meta"}),". This includes:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"viewType"}),": Indicates the type of the meeting, possible values are ",(0,o.jsx)(t.code,{children:"WEBINAR"}),",\n",(0,o.jsx)(t.code,{children:"GROUP_CALL"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"roomType"}),": Indicates the meeting is a group-call or a webinar."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"meetingTitle"}),": The title of the meeting."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"meetingStartedTimestamp"}),": The timestamp when the meeting started."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"socketConnected"}),": Boolean flag to show when the socket is connected."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"For example, if you want to get the title of the meeting the current participant\nis connected to, you can do so by doing:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"// Destructuring the metadata to get meetingTitle and joined\nconst { meetingTitle } = meeting.meta;\n\nif (meeting.self.roomJoined) {\n  console.log(\n    `The local user has joined a meeting with title ${meetingTitle}.`\n  );\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"meta"})," object also emits events for indicating the change in the connection\nstate of the room. For example, you can listen for the ",(0,o.jsx)(t.code,{children:"connected"})," event to know\nwhen the local user has successfully joined the room, and for the ",(0,o.jsx)(t.code,{children:"disconnected"}),"\nevent to find out if the local user's connection has dropped."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"meeting.meta.on('connected', () => {\n  console.log(\n    `The local user has successfully joined the meeting ${meeting.meta.meetingTitle}`\n  );\n});\n\nmeeting.meta.on('disconnected', () => {\n  console.log(\n    `The local user got disconnected from the meeting ${meeting.meta.meetingTitle}`\n  );\n});\n\nmeeting.meta.on('poorConnection', () => {\n  console.log(`The local user has poor network connection.`);\n});\n\nmeeting.meta.on('connectionError', ({ reason }) => {\n  console.log(`Could not connect to the room.`);\n});\n"})}),"\n",(0,o.jsx)(n,{children:(0,o.jsx)("title",{children:"Web Core Room Metadata"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(96540);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);