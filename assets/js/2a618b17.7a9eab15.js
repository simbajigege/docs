"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[49261],{73952:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var c=s(74848),n=s(28453);const a={title:"Receiving chat messages",description:"Receive chat messages that have been sent in a meeting.",sidebar_position:3,tags:["web-core","chat"]},i="Receiving chat messages",r={id:"chat/receiving-chat-messages",title:"Receiving chat messages",description:"Receive chat messages that have been sent in a meeting.",source:"@site/docs/react-web-core/chat/receiving-chat-messages.mdx",sourceDirName:"chat",slug:"/chat/receiving-chat-messages",permalink:"/docs/react-web-core/chat/receiving-chat-messages",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/react-web-core/chat/receiving-chat-messages.mdx",tags:[{label:"web-core",permalink:"/docs/react-web-core/tags/web-core"},{label:"chat",permalink:"/docs/react-web-core/tags/chat"}],version:"current",lastUpdatedAt:1706782034,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:3,frontMatter:{title:"Receiving chat messages",description:"Receive chat messages that have been sent in a meeting.",sidebar_position:3,tags:["web-core","chat"]},sidebar:"tutorialSidebar",previous:{title:"Sending a chat message",permalink:"/docs/react-web-core/chat/sending-a-chat-message"},next:{title:"Editing Chat Messages",permalink:"/docs/react-web-core/chat/edit-chat-messages"}},o={},d=[];function h(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,n.R)(),...e.components},{Head:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"receiving-chat-messages",children:"Receiving chat messages"}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"meeting.chat"})," object emits events when new chat messages are received. You\ncan listen for the ",(0,c.jsx)(t.code,{children:"chatUpdate"})," event to log when a new chat message is\nreceived."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"const messages = useDyteSelector((m) => m.chat.messages));\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Here, the ",(0,c.jsx)(t.code,{children:"message"})," is of type ",(0,c.jsx)(t.code,{children:"Message"}),", as defined in\n",(0,c.jsx)(t.a,{href:"./introduction",children:"introduction"}),". ",(0,c.jsx)(t.code,{children:"messages"})," is a list of all chat messages in the\nmeeting, which is the same as ",(0,c.jsx)(t.code,{children:"meeting.chat.messages"}),"."]}),"\n",(0,c.jsxs)(t.p,{children:["When a chat message is received, the ",(0,c.jsx)(t.code,{children:"meeting.chat.messages"})," list is also\nupdated."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ts",children:"console.log(JSON.stringify(meeting.chat.messages));\nmeeting.chat.on('chatUpdate', () => {\n  console.log(JSON.stringify(meeting.chat.messages));\n});\n"})}),"\n",(0,c.jsx)(s,{children:(0,c.jsx)("title",{children:"React Web Core Receiving chat messages"})})]})}function g(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>r});var c=s(96540);const n={},a=c.createContext(n);function i(e){const t=c.useContext(a);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),c.createElement(a.Provider,{value:t},e.children)}}}]);