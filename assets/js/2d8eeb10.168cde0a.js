"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[40894],{23223:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var i=r(74848),t=r(28453);const o={title:"Recording",description:"Explore the documentation on Android Recording in Dyte Docs.",sidebar_position:10,tags:["mobile-core","recording"]},d="Recording",c={id:"recording",title:"Recording",description:"Explore the documentation on Android Recording in Dyte Docs.",source:"@site/docs/android-core/recording.mdx",sourceDirName:".",slug:"/recording",permalink:"/docs/android-core/recording",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/android-core/recording.mdx",tags:[{label:"mobile-core",permalink:"/docs/android-core/tags/mobile-core"},{label:"recording",permalink:"/docs/android-core/tags/recording"}],version:"current",lastUpdatedAt:1710909635,formattedLastUpdatedAt:"Mar 20, 2024",sidebarPosition:10,frontMatter:{title:"Recording",description:"Explore the documentation on Android Recording in Dyte Docs.",sidebar_position:10,tags:["mobile-core","recording"]},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/docs/android-core/plugins"},next:{title:"Release Notes",permalink:"/docs/android-core/release-notes"}},s={},a=[{value:"Start a recording",id:"start-a-recording",level:2},{value:"Stop a recording",id:"stop-a-recording",level:2},{value:"Pause a recording",id:"pause-a-recording",level:2},{value:"Resume a paused recording",id:"resume-a-paused-recording",level:2},{value:"Get active recording state",id:"get-active-recording-state",level:2},{value:"Listen to recording state changes",id:"listen-to-recording-state-changes",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"recording",children:"Recording"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"meeting.recording"})," object can be used start and stop recordings in a meeting. You can also get the current status of a recording using this API."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"meeting.recording"})," object has the following properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"recordingState"}),": Indicates the current recording state of the meeting."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"start-a-recording",children:"Start a recording"}),"\n",(0,i.jsxs)(n.p,{children:["To start a recording, you can call the ",(0,i.jsx)(n.code,{children:"start"})," method in the ",(0,i.jsx)(n.code,{children:"meeting.recording"}),"\nobject. The valid states are ",(0,i.jsx)(n.code,{children:"IDLE"}),", ",(0,i.jsx)(n.code,{children:"STARTING"}),", ",(0,i.jsx)(n.code,{children:"RECORDING"}),", and ",(0,i.jsx)(n.code,{children:"STOPPING"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"meeting.recording.start();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"stop-a-recording",children:"Stop a recording"}),"\n",(0,i.jsxs)(n.p,{children:["Call ",(0,i.jsx)(n.code,{children:"meeting.recording.stop()"})," to stop the active recording."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"meeting.recording.stop();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"pause-a-recording",children:"Pause a recording"}),"\n",(0,i.jsxs)(n.p,{children:["Call ",(0,i.jsx)(n.code,{children:"meeting.recording.pause()"})," to pause the active recording."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"meeting.recording.pause();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"resume-a-paused-recording",children:"Resume a paused recording"}),"\n",(0,i.jsxs)(n.p,{children:["Call ",(0,i.jsx)(n.code,{children:"meeting.recording.resume()"})," to resume the paused recording."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"meeting.recording.resume();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"get-active-recording-state",children:"Get active recording state"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"meeting.recording.recordingState"})," property describes the current state of\nthe recording. The valid states are ",(0,i.jsx)(n.code,{children:"IDLE"}),", ",(0,i.jsx)(n.code,{children:"STARTING"}),", ",(0,i.jsx)(n.code,{children:"RECORDING"}),", and\n",(0,i.jsx)(n.code,{children:"STOPPING"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"listen-to-recording-state-changes",children:"Listen to recording state changes"}),"\n",(0,i.jsxs)(n.p,{children:["The changes to ",(0,i.jsx)(n.code,{children:"meeting.recording.recordingState"})," can be listened by implementing ",(0,i.jsx)(n.code,{children:"onMeetingRecordingStateUpdated"})," from ",(0,i.jsx)(n.code,{children:"DyteRecordingEventsListener"}),". You can attach this observer by calling ",(0,i.jsx)(n.code,{children:"meeting.addRecordingEventsListener(listener)"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"meeting.addRecordingEventsListener(object : DyteRecordingEventsListener {\n    override fun onMeetingRecordingStarted() {\n      // on recording started\n    }\n\n    override fun onMeetingRecordingEnded() {\n      // on recording ended\n    }\n\n    override fun onMeetingRecordingStateUpdated(state: DyteRecordingState) {\n      // on recording state update\n    }\n\n    override fun onMeetingRecordingStopError(e: Exception) {\n      // when local user tried to end recording but it fails\n    }\n\n    override fun onMeetingRecordingPauseError(e: Exception) {\n      // error in pausing the active recording\n    }\n\n    override fun onMeetingRecordingResumeError(e: Exception) {\n      // error in resuming a paused recording\n    }\n  })\n"})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>c});var i=r(96540);const t={},o=i.createContext(t);function d(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);