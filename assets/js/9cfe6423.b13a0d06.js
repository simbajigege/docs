"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[60471],{58502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(74848),a=t(28453);const r={title:"Participant Events",description:"Explore participant events in iOS Core with Dyte Docs. Leverage these events for dynamic interactions and enhanced collaboration within your app.",sidebar_position:3,tags:["mobile-core","participants","self"]},c=void 0,s={id:"participants/events",title:"Participant Events",description:"Explore participant events in iOS Core with Dyte Docs. Leverage these events for dynamic interactions and enhanced collaboration within your app.",source:"@site/docs/ios-core/participants/events.mdx",sourceDirName:"participants",slug:"/participants/events",permalink:"/docs/ios-core/participants/events",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/ios-core/participants/events.mdx",tags:[{label:"mobile-core",permalink:"/docs/ios-core/tags/mobile-core"},{label:"participants",permalink:"/docs/ios-core/tags/participants"},{label:"self",permalink:"/docs/ios-core/tags/self"}],version:"current",lastUpdatedAt:1709899206,formattedLastUpdatedAt:"Mar 8, 2024",sidebarPosition:3,frontMatter:{title:"Participant Events",description:"Explore participant events in iOS Core with Dyte Docs. Leverage these events for dynamic interactions and enhanced collaboration within your app.",sidebar_position:3,tags:["mobile-core","participants","self"]},sidebar:"tutorialSidebar",previous:{title:"The participant object",permalink:"/docs/ios-core/participants/participant-object"},next:{title:"Room Metadata",permalink:"/docs/ios-core/room/room-metadata"}},o={},p=[{value:"Participant joined",id:"participant-joined",level:2},{value:"Participant left",id:"participant-left",level:2},{value:"Screenshare updates",id:"screenshare-updates",level:2},{value:"Video update",id:"video-update",level:2},{value:"Audio update",id:"audio-update",level:2},{value:"Active speaker",id:"active-speaker",level:2},{value:"Pinned participant",id:"pinned-participant",level:2},{value:"Active participants list change",id:"active-participants-list-change",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["You can subscribe to events for all participants by implementing\n",(0,i.jsx)(n.code,{children:"DyteParticipantEventsListener"})," callback and then passing that object to\n",(0,i.jsx)(n.code,{children:"meeting.addParticipantEventsListener(dyteParticipantEventsListener)"})," method.\nHere are the supported methods:"]}),"\n",(0,i.jsx)(n.h2,{id:"participant-joined",children:"Participant joined"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when any participant joins the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantJoin(participant: DyteMeetingParticipant) {\n            // your code here to handle new participant\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"participant-left",children:"Participant left"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when any participant leaves the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantLeave(participant: DyteMeetingParticipant) {\n            // your code here to handle participant left from meeting\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"screenshare-updates",children:"Screenshare updates"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when there is any change in screenshares in a meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onScreenSharesUpdated() {\n            // your code here to handle screenshares from meeting\n            // you can use `meeting.participants.screenshares` to get latest screenshare participants\n        }\n        func onScreenShareEnded(participant: DyteMeetingParticipant) {\n            // your code here to handle screenshare ended\n        }\n\n        func onScreenShareStarted(participant: DyteMeetingParticipant) {\n            //  your code here to handle screenshare started\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"video-update",children:"Video update"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any participant starts / stops video."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onVideoUpdate(videoEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant video toggle update\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"audio-update",children:"Audio update"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any participant starts / stops audio."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onAudioUpdate(audioEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant audio toggle update\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"active-speaker",children:"Active speaker"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any is change in active speaker in the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveSpeakerChanged(participant: DyteMeetingParticipant) {\n            // your code here to handle active speaker\n        }\n\n        func onNoActiveSpeaker() {\n            // your code here to handle no active speaker\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"pinned-participant",children:"Pinned participant"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any is change in pinned participant in the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantPinned(participant: DyteMeetingParticipant) {\n            // your code here to show pinned participant\n        }\n\n        func onParticipantUnpinned(participant: DyteMeetingParticipant) {\n            // your code here to remove pinned participant\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"active-participants-list-change",children:"Active participants list change"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when any change in active participants list in the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveParticipantsChanged(active: [DyteMeetingParticipant]) {\n            // your code here to refresh active participants\n        }\n    }\n"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("title",{children:"iOS Core Participant Events"}),(0,i.jsx)("meta",{name:"description",content:"Explore participant events in iOS Core with Dyte Docs. Leverage these events for dynamic interactions and enhanced collaboration within your app."})]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>s});var i=t(96540);const a={},r=i.createContext(a);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);