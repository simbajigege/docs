"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[63789],{8974:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>i,default:()=>g,frontMatter:()=>c,metadata:()=>o,toc:()=>d});var n=t(74848),a=t(28453);const c={title:"Receiving chat messages",description:"Receive chat messages that have been sent in a meeting.",sidebar_position:3,tags:["rn-core","chat"]},i="Receiving chat messages",o={id:"chat/receiving-chat-messages",title:"Receiving chat messages",description:"Receive chat messages that have been sent in a meeting.",source:"@site/docs/rn-core/chat/receiving-chat-messages.mdx",sourceDirName:"chat",slug:"/chat/receiving-chat-messages",permalink:"/docs/rn-core/chat/receiving-chat-messages",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/rn-core/chat/receiving-chat-messages.mdx",tags:[{label:"rn-core",permalink:"/docs/rn-core/tags/rn-core"},{label:"chat",permalink:"/docs/rn-core/tags/chat"}],version:"current",lastUpdatedAt:1706782034,formattedLastUpdatedAt:"Feb 1, 2024",sidebarPosition:3,frontMatter:{title:"Receiving chat messages",description:"Receive chat messages that have been sent in a meeting.",sidebar_position:3,tags:["rn-core","chat"]},sidebar:"tutorialSidebar",previous:{title:"Sending a chat message",permalink:"/docs/rn-core/chat/sending-a-chat-message"},next:{title:"Editing Chat Messages",permalink:"/docs/rn-core/chat/edit-chat-messages"}},r={},d=[];function h(e){const s={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Head:t}=s;return t||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"receiving-chat-messages",children:"Receiving chat messages"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"meeting.chat"})," object emits events when new chat messages are received. You\ncan listen for the ",(0,n.jsx)(s.code,{children:"chatUpdate"})," event to log when a new chat message is\nreceived."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"meeting.chat.on('chatUpdate', ({ message, messages }) => {\n  console.log(`Received message ${message}`);\n  console.log(`All messages in chat: ${messages.join(', ')}`);\n});\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Here, the ",(0,n.jsx)(s.code,{children:"message"})," is of type ",(0,n.jsx)(s.code,{children:"Message"}),", as defined in\n",(0,n.jsx)(s.a,{href:"./introduction",children:"introduction"}),". ",(0,n.jsx)(s.code,{children:"messages"})," is a list of all chat messages in the\nmeeting, which is the same as ",(0,n.jsx)(s.code,{children:"meeting.chat.messages"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["When a chat message is received, the ",(0,n.jsx)(s.code,{children:"meeting.chat.messages"})," list is also\nupdated."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"console.log(JSON.stringify(meeting.chat.messages));\nmeeting.chat.on('chatUpdate', () => {\n  console.log(JSON.stringify(meeting.chat.messages));\n});\n"})}),"\n",(0,n.jsx)(t,{children:(0,n.jsx)("title",{children:"React Native Core Receiving chat messages"})})]})}function g(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var n=t(96540);const a={},c=n.createContext(a);function i(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);