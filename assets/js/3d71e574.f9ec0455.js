"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[24353],{75693:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var i=t(74848),s=t(28453);const a={sidebar_position:4,description:"Access comprehensive documentation on iOS events with Dyte Docs. Stay informed and integrate events seamlessly into your app."},r="Events",d={id:"events",title:"Events",description:"Access comprehensive documentation on iOS events with Dyte Docs. Stay informed and integrate events seamlessly into your app.",source:"@site/docs/ios/events.mdx",sourceDirName:".",slug:"/events",permalink:"/docs/ios/events",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/ios/events.mdx",tags:[],version:"current",lastUpdatedAt:1709899206,formattedLastUpdatedAt:"Mar 8, 2024",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Access comprehensive documentation on iOS events with Dyte Docs. Stay informed and integrate events seamlessly into your app."},sidebar:"tutorialSidebar",previous:{title:"Design System",permalink:"/docs/ios/design-system"},next:{title:"DyteAvatarView",permalink:"/docs/ios/components/dyte-avatar"}},o={},c=[{value:"Local User - Events",id:"local-user---events",level:2},{value:"Room joined",id:"room-joined",level:3},{value:"Video update",id:"video-update",level:3},{value:"Audio update",id:"audio-update",level:3},{value:"Room disconnected update",id:"room-disconnected-update",level:3},{value:"Proximity changed",id:"proximity-changed",level:3},{value:"Waitlist status",id:"waitlist-status",level:3},{value:"Participants list events",id:"participants-list-events",level:2},{value:"Participant joined",id:"participant-joined",level:3},{value:"Participant left",id:"participant-left",level:3},{value:"Screenshare updates",id:"screenshare-updates",level:3},{value:"Grid change",id:"grid-change",level:3},{value:"Video update",id:"video-update-1",level:3},{value:"Audio update",id:"audio-update-1",level:3},{value:"Active speaker",id:"active-speaker",level:3},{value:"Pinned participant",id:"pinned-participant",level:3},{value:"Active participants list change",id:"active-participants-list-change",level:3},{value:"Recording",id:"recording",level:2},{value:"Get active recording state",id:"get-active-recording-state",level:3},{value:"Listen to recording state changes",id:"listen-to-recording-state-changes",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.h2,{id:"local-user---events",children:"Local User - Events"}),"\n",(0,i.jsxs)(n.p,{children:["You can subscribe to various events on the local user by implementing\n",(0,i.jsx)(n.code,{children:"DyteSelfEventsListener"})," and passing the object to\n",(0,i.jsx)(n.code,{children:"meeting.addSelfEventsListener(dyteSelfEventsListener)"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"room-joined",children:"Room joined"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when the room join event completes and now the meeting is ready to\nproduce and consume media."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onRoomJoined() {\n        //Room Joined\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"video-update",children:"Video update"}),"\n",(0,i.jsxs)(n.p,{children:["Triggered when the user starts / stops the video using ",(0,i.jsx)(n.code,{children:"enableVideo"})," or\n",(0,i.jsx)(n.code,{children:"disableVideo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onVideoUpdate(videoEnabled: Bool) {\n      if (videoEnabled) {\n        // video is enabled, and other participants in room can see local user\n      } else {\n        // video is disabled, and other participants in room can not see local user.\n      }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"audio-update",children:"Audio update"}),"\n",(0,i.jsxs)(n.p,{children:["Triggered when the user starts / stops the audio using ",(0,i.jsx)(n.code,{children:"enableAudio"})," or\n",(0,i.jsx)(n.code,{children:"disableAudio"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"\nextension MeetingViewModel: DyteSelfEventsListener {\n    func onAudioUpdate(audioEnabled: Bool) {\n      if (audioEnabled) {\n        // audio is enabled, and other participants in room can hear local user\n      } else {\n        // audio is disabled, and other participants in room can not hear local user.\n      }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"room-disconnected-update",children:"Room disconnected update"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when the user is disconnected due to media/network errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onMeetingRoomDisconnected() {\n      //disconnected\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"proximity-changed",children:"Proximity changed"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when there is any change in proximity. Meaning if device is near ear\npiece which triggers display on/off."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onProximityChanged(isNear: Bool) {\n      // isNear\n      // if true, display should be turned off, as user might be speaking through earpiece\n      // if false, display should be turned on, as user might be looking at display and listening through speaker/earphones.\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"waitlist-status",children:"Waitlist status"}),"\n",(0,i.jsx)(n.p,{children:"For meetings whose waiting room is enabled:"}),"\n",(0,i.jsx)(n.p,{children:"To get status of localUser in waiting room we can use"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"let waitListStatus = meeting.localUser.waitListStatus\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Developers can listen to those changes in ",(0,i.jsx)(n.code,{children:"onWaitListStatusUpdate()"})," callbacks"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\n\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"participants-list-events",children:"Participants list events"}),"\n",(0,i.jsxs)(n.p,{children:["You can subscribe to events for all participants by implementing\n",(0,i.jsx)(n.code,{children:"DyteParticipantEventsListener"})," callback and then passing that object to\n",(0,i.jsx)(n.code,{children:"meeting.addParticipantEventsListener(dyteParticipantEventsListener)"})," method.\nHere are the supported methods:"]}),"\n",(0,i.jsx)(n.h3,{id:"participant-joined",children:"Participant joined"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when any participant joins the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantJoin(participant: DyteMeetingParticipant) {\n            // your code here to handle new participant\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"participant-left",children:"Participant left"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when any participant leaves the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantLeave(participant: DyteMeetingParticipant) {\n            // your code here to handle participant left from meeting\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"screenshare-updates",children:"Screenshare updates"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when there is any change in screenshares in a meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onScreenSharesUpdated() {\n            // your code here to handle screenshares from meeting\n            // you can use `meeting.participants.screenshares` to get latest screenshare participants\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"grid-change",children:"Grid change"}),"\n",(0,i.jsx)(n.p,{children:"Whenever there is a change in the GridInfo for the room, the following method is triggered.\ncalled."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onGridUpdated(gridInfo: GridInfo) {\n            // your code here to handle grid changes.\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"video-update-1",children:"Video update"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any participant starts / stops video."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onVideoUpdate(videoEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant video toggle update\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"audio-update-1",children:"Audio update"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any participant starts / stops audio."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onAudioUpdate(audioEnabled: Bool, participant: DyteMeetingParticipant) {\n            // your code here to handle participant audio toggle update\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"active-speaker",children:"Active speaker"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any is change in active speaker in the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveSpeakerChanged(participant: DyteMeetingParticipant) {\n            // your code here to handle active speaker\n        }\n\n        func onNoActiveSpeaker() {\n            // your code here to handle no active speaker\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pinned-participant",children:"Pinned participant"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any is change in pinned participant in the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onParticipantPinned(participant: DyteMeetingParticipant) {\n            // your code here to show pinned participant\n        }\n\n        func onParticipantUnpinned() {\n            // your code here to remove pinned participant\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"active-participants-list-change",children:"Active participants list change"}),"\n",(0,i.jsx)(n.p,{children:"Triggers an event when any change in active participants list in the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"    extension MeetingViewModel: DyteParticipantEventsListener {\n        func onActiveParticipantsChanged(active: [DyteMeetingParticipant]) {\n            // your code here to refresh active participants\n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"recording",children:"Recording"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"meeting.recording"})," object can be used start and stop recordings in a\nmeeting. You can also get the current status of a recording using this API."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"meeting.recording"})," object has the following properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"recordingState"}),": Indicates the current recording state of the meeting."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"get-active-recording-state",children:"Get active recording state"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"meeting.recording.recordingState"})," property describes the current state of\nthe recording. The valid states are ",(0,i.jsx)(n.code,{children:"IDLE"}),", ",(0,i.jsx)(n.code,{children:"STARTING"}),", ",(0,i.jsx)(n.code,{children:"RECORDING"}),", and\n",(0,i.jsx)(n.code,{children:"STOPPING"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"listen-to-recording-state-changes",children:"Listen to recording state changes"}),"\n",(0,i.jsxs)(n.p,{children:["The changes to ",(0,i.jsx)(n.code,{children:"meeting.recording.recordingState"})," can be listened by\nimplementing ",(0,i.jsx)(n.code,{children:"onMeetingRecordingStateUpdated"})," from\n",(0,i.jsx)(n.code,{children:"DyteMeetingRoomEventsListener"}),". You can attach this observer by calling\n",(0,i.jsx)(n.code,{children:"meeting.addMeetingRoomEventsListener(listener)"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"meeting.addMeetingRoomEventsListener(object : DyteMeetingRoomEventsListener {\n    override fun onMeetingRecordingStarted() {\n      super.onMeetingRecordingStarted()\n      // on recording started\n    }\n\n    override fun onMeetingRecordingEnded() {\n      super.onMeetingRecordingEnded()\n      // on recording ended\n    }\n\n    override fun onMeetingRecordingStateUpdated(state: DyteRecordingState) {\n      super.onMeetingRecordingStateUpdated(state)\n      // on recording state update\n    }\n\n    override fun onMeetingRecordingStopError(e: Exception) {\n      super.onMeetingRecordingStopError(e)\n      // when local user tried to end recording but it fails\n    }\n  })\n"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("title",{children:"iOS Events"}),(0,i.jsx)("meta",{name:"description",content:"Access comprehensive documentation on iOS events with Dyte Docs. Stay informed and integrate events seamlessly into your app."})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);