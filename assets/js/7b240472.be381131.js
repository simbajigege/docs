"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[42417],{31565:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var n=i(74848),a=i(28453);const o={title:"Introduction",description:"Explore the introduction to participants in iOS Core with Dyte Docs. Learn how to enhance your app's collaborative features seamlessly.",sidebar_position:1,tags:["mobile-core","participants","participant"]},s="Introduction - Room participants",r={id:"participants/introduction",title:"Introduction",description:"Explore the introduction to participants in iOS Core with Dyte Docs. Learn how to enhance your app's collaborative features seamlessly.",source:"@site/docs/ios-core/participants/introduction.mdx",sourceDirName:"participants",slug:"/participants/introduction",permalink:"/docs/ios-core/participants/introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/ios-core/participants/introduction.mdx",tags:[{label:"mobile-core",permalink:"/docs/ios-core/tags/mobile-core"},{label:"participants",permalink:"/docs/ios-core/tags/participants"},{label:"participant",permalink:"/docs/ios-core/tags/participant"}],version:"current",lastUpdatedAt:1709899206,formattedLastUpdatedAt:"Mar 8, 2024",sidebarPosition:1,frontMatter:{title:"Introduction",description:"Explore the introduction to participants in iOS Core with Dyte Docs. Learn how to enhance your app's collaborative features seamlessly.",sidebar_position:1,tags:["mobile-core","participants","participant"]},sidebar:"tutorialSidebar",previous:{title:"Sharing screen on iOS",permalink:"/docs/ios-core/local-user/screen-share-guide"},next:{title:"The participant object",permalink:"/docs/ios-core/participants/participant-object"}},c={},l=[{value:"Room participants object.",id:"room-participants-object",level:2},{value:"Grid info for the room",id:"grid-info-for-the-room",level:2},{value:"Video update for all participants",id:"video-update-for-all-participants",level:2},{value:"Audio update for all participants",id:"audio-update-for-all-participants",level:2},{value:"Move between pages in paginated mode",id:"move-between-pages-in-paginated-mode",level:2},{value:"Host control methods",id:"host-control-methods",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Head:i}=t;return i||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"introduction---room-participants",children:"Introduction - Room participants"}),"\n",(0,n.jsxs)(t.p,{children:["The data regarding all meeting participants is stored under\n",(0,n.jsx)(t.code,{children:"meeting.participants"}),". Use the methods and events to consume the participants\ndata."]}),"\n",(0,n.jsx)(t.h2,{id:"room-participants-object",children:"Room participants object."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"joined"}),": A list that contains all the participants who have joined the\nmeeting."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"waitlisted"}),": A list that contains all the participants waiting to join the\nmeeting."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"active"}),": A list that contains all the participants except the local user who\nare supposed to be on the screen at the moment"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"pinned"}),": A nullable participant object. If any participant is pinned is that\nparticipant else it is null."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"screenshares"}),": A list that contains all the participants who have shared\nscreen in the meeting."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"gridInfo"}),": This object has all data related to pages in the room."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Each participant in each of the ",(0,n.jsx)(t.code,{children:"joined"}),", ",(0,n.jsx)(t.code,{children:"waitlisted"}),", ",(0,n.jsx)(t.code,{children:"active"})," and\n",(0,n.jsx)(t.code,{children:"screenshares"})," list is of type ",(0,n.jsx)(t.code,{children:"DyteMeetingParticipant"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"For example, to get all the participants who joined the meeting:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"// get all joined participants\nlet joinedParticipants = meeting.participants.joined;\n"})}),"\n",(0,n.jsx)(t.p,{children:"For example, to get all the active participants in the meeting:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"// get all active participants\nlet joinedParticipants = meeting.participants.active;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Therefore, if you were to make a grid of participants, you'd use the ",(0,n.jsx)(t.code,{children:"active"}),"\nlist, but to display all participants in the meeting you'd use the ",(0,n.jsx)(t.code,{children:"joined"}),"\nlist."]}),"\n",(0,n.jsx)(t.h2,{id:"grid-info-for-the-room",children:"Grid info for the room"}),"\n",(0,n.jsxs)(t.p,{children:["Following object can be retrieved from ",(0,n.jsx)(t.code,{children:"meeting"})," object by using\n",(0,n.jsx)(t.code,{children:"meeting.participants.gridInfo"}),". This object will have necessary information\nregarding pageCount, next page, previos page, current page, etc."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"  let pageCount: Int\n  let currentPageNumber: Int\n  let isNextPagePossible: Bool\n  let isPreviousPagePossible: Bool\n  let shouldShowPaginator: Bool\n  let maxVideoCountPerPage: Int\n"})}),"\n",(0,n.jsx)(t.h2,{id:"video-update-for-all-participants",children:"Video update for all participants"}),"\n",(0,n.jsxs)(t.p,{children:["Triggered when the user starts / stops the video using ",(0,n.jsx)(t.code,{children:"enableVideo"})," or\n",(0,n.jsx)(t.code,{children:"disableVideo"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"extension MeetingViewModel: DyteParticipantEventsListener {\n     func videoUpdate(videoEnabled: Boolean, participant: DyteMeetingParticipant) {\n      if (videoEnabled) {\n        // video is enabled, and other participants in room can see local user\n      } else {\n        // video is disabled, and other participants in room can not see local user.\n      }\n    }\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"audio-update-for-all-participants",children:"Audio update for all participants"}),"\n",(0,n.jsxs)(t.p,{children:["Triggered when the user starts / stops the audio using ",(0,n.jsx)(t.code,{children:"enableAudio"})," or\n",(0,n.jsx)(t.code,{children:"disableAudio"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"extension MeetingViewModel: DyteParticipantEventsListener {\n    func audioUpdate(audioEnabled: Boolean, participant: DyteMeetingParticipant) {\n      if (audioEnabled) {\n        // audio is enabled, and other participants in room can hear local user\n      } else {\n        // audio is disabled, and other participants in room can not hear local user.\n      }\n    }\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"move-between-pages-in-paginated-mode",children:"Move between pages in paginated mode"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"setPage(pageNumber: Int)"})," method allows you to switch between pages of\nparticipants present in the meeting."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"// switch to 1st page\nmeeting.participants.setPage(1)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"host-control-methods",children:"Host control methods"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"meeting.participants"})," object has host control methods that allow you to\ndisable the audio and video streams of other users in the meeting (given that\nthe user preset has the right permissions)."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"// mute all participants\nmeeting.participants.disableAllAudio()\n\n// mute a single participant\nlet participantToUpdate = meeting.participants.joined.first\nparticipantToUpdate.disableAudio()\n\n// disable video for all participants\nmeeting.participants.disableAllVideo()\n\n// disable video for a single participant\nlet participantToUpdate = meeting.participants.joined.first()\nparticipantToUpdate.disableVideo()\n"})}),"\n",(0,n.jsxs)(t.p,{children:["To remove all participants from a meeting, you can call the ",(0,n.jsx)(t.code,{children:"kickAll()"})," method."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-swift",children:"// remove all participants from the meeting\nmeeting.participants.kickAll()\n\n// remove a single participant\nlet participantToRemove = meeting.participants.joined.first()\nparticipantToRemove.kick()\n"})}),"\n",(0,n.jsxs)(i,{children:[(0,n.jsx)("title",{children:"iOS Core Introduction"}),(0,n.jsx)("meta",{name:"description",content:"Explore the introduction to participants in iOS Core with Dyte Docs. Learn how to enhance your app's collaborative features seamlessly."})]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>r});var n=i(96540);const a={},o=n.createContext(a);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);