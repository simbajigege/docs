"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[47973],{74490:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var n=t(74848),a=t(28453);const r={title:"The participant object",description:"Explore the Android Participants Participant Object and its functionalities for effective integration in your application.",sidebar_position:2,tags:["mobile-core","participants","participant"]},o="The participant object",c={id:"participants/participant-object",title:"The participant object",description:"Explore the Android Participants Participant Object and its functionalities for effective integration in your application.",source:"@site/docs/android-core/participants/participant-object.mdx",sourceDirName:"participants",slug:"/participants/participant-object",permalink:"/docs/android-core/participants/participant-object",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/android-core/participants/participant-object.mdx",tags:[{label:"mobile-core",permalink:"/docs/android-core/tags/mobile-core"},{label:"participants",permalink:"/docs/android-core/tags/participants"},{label:"participant",permalink:"/docs/android-core/tags/participant"}],version:"current",lastUpdatedAt:1710745113,formattedLastUpdatedAt:"Mar 18, 2024",sidebarPosition:2,frontMatter:{title:"The participant object",description:"Explore the Android Participants Participant Object and its functionalities for effective integration in your application.",sidebar_position:2,tags:["mobile-core","participants","participant"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/android-core/participants/introduction"},next:{title:"Participant Events",permalink:"/docs/android-core/participants/events"}},p={},s=[{value:"To get Video view of a given participant",id:"to-get-video-view-of-a-given-participant",level:2},{value:"Audio/Video updates for participant",id:"audiovideo-updates-for-participant",level:2},{value:"Host controls methods",id:"host-controls-methods",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Head:t}=i;return t||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"the-participant-object",children:"The participant object"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"participant"})," object consists of all the information related to a particular participant. For instance, it contains a participants video/audio/screenshare stream, and the participant's name. It also contains state variables that indicate whether a participant's camera is on or off, and whether they are muted or unmuted."]}),"\n",(0,n.jsx)(i.p,{children:"The participant object has the following properties."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"id"}),": The ",(0,n.jsx)(i.code,{children:"participantId"})," of the participant (aka ",(0,n.jsx)(i.code,{children:"peerId"}),")."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"userId"}),": The ",(0,n.jsx)(i.code,{children:"userId"})," of the participant."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"name"}),": The participant's name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"picture"}),": The participant's picture (if any)."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"clientSpecificId"}),": An arbitrary ID that can be set to identify the\nparticipant."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"videoTrack"}),": The video track of the participant."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"screenShareTrack"}),": The video and audio (if any) track of the participant's\nscreen share stream."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"videoEnabled"}),": Set to true if the participant's camera is on."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"audioEnabled"}),": Set to true if the participant is unmuted."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"isPinned"}),": True if current user is pinned in the meeting room."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"presetName"}),": Name of the preset associated with the participant."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"stageStatus"}),": Status of stage for the participant"]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"to-get-video-view-of-a-given-participant",children:"To get Video view of a given participant"}),"\n",(0,n.jsxs)(i.p,{children:["You can call ",(0,n.jsx)(i.code,{children:"participant.getVideoView()"})," which will return a View which further\ncan used to add in any View Group in android."]}),"\n",(0,n.jsxs)(i.p,{children:["Similarly one can use ",(0,n.jsx)(i.code,{children:"participant.getScreenShareView()"})," which will return a\nView which further can used to add in any View Group in android."]}),"\n",(0,n.jsx)(i.h2,{id:"audiovideo-updates-for-participant",children:"Audio/Video updates for participant"}),"\n",(0,n.jsxs)(i.p,{children:["You can listen to audio/video changes for a single participant by calling\n",(0,n.jsx)(i.code,{children:"addParticipantUpdateListener(listener: DyteParticipantUpdateListener)"})," on any\nparticipant object."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-kotlin",children:"dyteParticipant.addParticipantUpdateListener(object : DyteParticipantUpdateListener {\n      override fun onAudioUpdate(participant: DyteMeetingParticipant, isEnabled: Boolean) {\n        // on audio update\n      }\n\n      override fun onVideoUpdate(participant: DyteMeetingParticipant, isEnabled: Boolean) {\n        // on video update\n      }\n\n      override fun onScreenShareStarted(participant: DyteMeetingParticipant) {\n        // when participant start to screenshare\n      }\n\n      override fun onScreenShareEnded(participant: DyteMeetingParticipant) {\n        // when participant stops screenshare\n      }\n\n      override fun onPinned() {\n        // when participant is pinned\n      }\n\n      override fun onUnpinned() {\n        // when participant is unpinned\n      }\n\n      override fun onSetAsActiveSpeaker() {\n        // when participant set to active speaker\n      }\n\n      override fun onRemovedAsActiveSpeaker() {\n        // when participant is no longer active speaker\n      }\n    })\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Also make sure to remove event listener when they are no longer used. You can\nremove DyteParticipantUpdateListener by calling\n",(0,n.jsx)(i.code,{children:"removeParticipantUpdateListener(listener)"})]}),"\n",(0,n.jsx)(i.h2,{id:"host-controls-methods",children:"Host controls methods"}),"\n",(0,n.jsx)(i.p,{children:"If you (the local user) have the relevant permissions in the meeting, you can\ndisable a participant's video/audio streams, or even remove them from the\nmeeting."}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-kotlin",children:"val participant = meeting.participants.joined.get(0);\n\n// To disable a participant's video stream\nparticipant.disableVideo();\n\n// To disable a participant's audio stream\nparticipant.disableAudio();\n\n// To kick a participant from the meeting\nparticipant.kick();\n\n// to pin a participant in a meeting\nparticipant.pin();\n\n// to retrieve if current participant is already pinned in a meeting\nparticipant.isPinned\n"})}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("title",{children:"Android Core The participant object"}),(0,n.jsx)("meta",{name:"description",content:"Explore the Android Participants Participant Object and its functionalities for effective integration in your application."})]})]})}function l(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>c});var n=t(96540);const a={},r=n.createContext(a);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);