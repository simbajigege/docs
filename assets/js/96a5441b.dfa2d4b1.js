"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[6513],{66413:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(74848),s=t(28453);const o={title:"Events",description:"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app.",sidebar_position:2,tags:["mobile-core","local-user","self"]},r="Local User - Events",a={id:"local-user/events",title:"Events",description:"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app.",source:"@site/docs/ios-core/local-user/events.mdx",sourceDirName:"local-user",slug:"/local-user/events",permalink:"/docs/ios-core/local-user/events",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/ios-core/local-user/events.mdx",tags:[{label:"mobile-core",permalink:"/docs/ios-core/tags/mobile-core"},{label:"local-user",permalink:"/docs/ios-core/tags/local-user"},{label:"self",permalink:"/docs/ios-core/tags/self"}],version:"current",lastUpdatedAt:1709899206,formattedLastUpdatedAt:"Mar 8, 2024",sidebarPosition:2,frontMatter:{title:"Events",description:"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app.",sidebar_position:2,tags:["mobile-core","local-user","self"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/ios-core/local-user/introduction"},next:{title:"Manage Media Devices",permalink:"/docs/ios-core/local-user/manage-media-devices"}},d={},l=[{value:"Room joined",id:"room-joined",level:3},{value:"Video update",id:"video-update",level:3},{value:"Audio update",id:"audio-update",level:3},{value:"Room disconnected update",id:"room-disconnected-update",level:3},{value:"Proximity changed",id:"proximity-changed",level:3},{value:"Waitlist status",id:"waitlist-status",level:3},{value:"Webinar Request",id:"webinar-request",level:2},{value:"LocalUser removed",id:"localuser-removed",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"local-user---events",children:"Local User - Events"}),"\n",(0,i.jsxs)(n.p,{children:["You can subscribe to various events on the local user by implementing\n",(0,i.jsx)(n.code,{children:"DyteSelfEventsListener"})," and passing the object to\n",(0,i.jsx)(n.code,{children:"meeting.addSelfEventsListener(dyteSelfEventsListener)"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"room-joined",children:"Room joined"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when the room join event completes and now the meeting is ready to\nproduce and consume media."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onRoomJoined() {\n        //Room Joined\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"video-update",children:"Video update"}),"\n",(0,i.jsxs)(n.p,{children:["Triggered when the user starts / stops the video using ",(0,i.jsx)(n.code,{children:"enableVideo"})," or\n",(0,i.jsx)(n.code,{children:"disableVideo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onVideoUpdate(videoEnabled: Bool) {\n      if (videoEnabled) {\n        // video is enabled, and other participants in room can see local user\n      } else {\n        // video is disabled, and other participants in room can not see local user.\n      }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"audio-update",children:"Audio update"}),"\n",(0,i.jsxs)(n.p,{children:["Triggered when the user starts / stops the audio using ",(0,i.jsx)(n.code,{children:"enableAudio"})," or\n",(0,i.jsx)(n.code,{children:"disableAudio"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"\nextension MeetingViewModel: DyteSelfEventsListener {\n    func onAudioUpdate(audioEnabled: Bool) {\n      if (audioEnabled) {\n        // audio is enabled, and other participants in room can hear local user\n      } else {\n        // audio is disabled, and other participants in room can not hear local user.\n      }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"room-disconnected-update",children:"Room disconnected update"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when the user is disconnected due to media/network errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onMeetingRoomDisconnected() {\n      //disconnected\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"proximity-changed",children:"Proximity changed"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when there is any change in proximity. Meaning if device is near ear\npiece which triggers display on/off."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onProximityChanged(isNear: Bool) {\n      // isNear\n      // if true, display should be turned off, as user might be speaking through earpiece\n      // if false, display should be turned on, as user might be looking at display and listening through speaker/earphones.\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"waitlist-status",children:"Waitlist status"}),"\n",(0,i.jsx)(n.p,{children:"For meetings whose waiting room is enabled:"}),"\n",(0,i.jsx)(n.p,{children:"To get status of localUser in waiting room we can use"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"let waitListStatus = meeting.localUser.waitListStatus\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Developers can listen to those changes in ",(0,i.jsx)(n.code,{children:"onWaitListStatusUpdate()"})," callbacks"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\n\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"webinar-request",children:"Webinar Request"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"onWebinarPresentRequestReceived()"})," callback is triggered when the local user receives a request to join the webinar, while the ",(0,i.jsx)(n.code,{children:"onStoppedPresenting()"})," callback is triggered when the local user ends their presentation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onWebinarPresentRequestReceived() {\n        // Display an alert to the user here, allowing them to accept or reject the request.\n    }\n    func onStoppedPresenting() {\n        //Display an alert to the user indicating that they are no longer presenting.\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"localuser-removed",children:"LocalUser removed"}),"\n",(0,i.jsxs)(n.p,{children:["Whenever local user is removed from the meeting, ",(0,i.jsx)(n.code,{children:"onRemovedFromMeeting()"})," callback is triggered."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"extension MeetingViewModel: DyteSelfEventsListener {\n    func onRemovedFromMeeting() {\n      // Display an alert here that user no longer in the meeting.\n    }\n}\n"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("title",{children:"iOS Core Events"}),(0,i.jsx)("meta",{name:"description",content:"Explore local user events in iOS Core with Dyte Docs. Understand how to leverage these events for enhanced user experiences within your app."})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);