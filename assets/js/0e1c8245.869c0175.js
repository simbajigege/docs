"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[67461],{26027:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var i=t(74848),a=t(28453);const r={title:"Events",description:"Event handling for participants.",sidebar_position:3,tags:["web-core","participants","self"]},s="Events",c={id:"participants/events",title:"Events",description:"Event handling for participants.",source:"@site/docs/react-web-core/participants/events.mdx",sourceDirName:"participants",slug:"/participants/events",permalink:"/docs/react-web-core/participants/events",draft:!1,unlisted:!1,editUrl:"https://github.com/dyte-io/docs/tree/main/docs/react-web-core/participants/events.mdx",tags:[{label:"web-core",permalink:"/docs/react-web-core/tags/web-core"},{label:"participants",permalink:"/docs/react-web-core/tags/participants"},{label:"self",permalink:"/docs/react-web-core/tags/self"}],version:"current",lastUpdatedAt:1711302110,formattedLastUpdatedAt:"Mar 24, 2024",sidebarPosition:3,frontMatter:{title:"Events",description:"Event handling for participants.",sidebar_position:3,tags:["web-core","participants","self"]},sidebar:"tutorialSidebar",previous:{title:"Participant object",permalink:"/docs/react-web-core/participants/participant-object"},next:{title:"Picture-in-Picture",permalink:"/docs/react-web-core/participants/pip"}},d={},o=[{value:"View mode change",id:"view-mode-change",level:3},{value:"Page change",id:"page-change",level:3},{value:"Active speaker",id:"active-speaker",level:3},{value:"Events on all participants",id:"events-on-all-participants",level:2},{value:"Participant joined",id:"participant-joined",level:3},{value:"Participant pinned",id:"participant-pinned",level:3},{value:"Video update",id:"video-update",level:3},{value:"Screen share update",id:"screen-share-update",level:3},{value:"Network quality score",id:"network-quality-score",level:2},{value:"Events for specific participant",id:"events-for-specific-participant",level:2},{value:"Webinar events",id:"webinar-events",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"events",children:"Events"}),"\n",(0,i.jsxs)(n.p,{children:["You can subscribe to events for all participants using\n",(0,i.jsx)(n.code,{children:"meeting.participants.on()"})," method. Here are the supported events:"]}),"\n",(0,i.jsx)(n.h3,{id:"view-mode-change",children:"View mode change"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when the View mode changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const viewMode = useDyteSelector((meeting) => meeting.participants.viewMode);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"page-change",children:"Page change"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pageChanged = useDyteSelector(\n  (meeting) => meeting.participants.pageCount\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"active-speaker",children:"Active speaker"}),"\n",(0,i.jsxs)(n.p,{children:["This event is triggered when a participant becomes ",(0,i.jsx)(n.code,{children:"active"})," when they starts to\nspeak."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const activeSpeaker = useDyteSelector(\n  (meeting) => meeting.participants.lastActiveSpeaker\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"events-on-all-participants",children:"Events on all participants"}),"\n",(0,i.jsxs)(n.p,{children:["Instead of subscribing to individual participant events, you can subscribe to a\nparticipant map, such as ",(0,i.jsx)(n.code,{children:"joined"})," & ",(0,i.jsx)(n.code,{children:"active"})," and get updated when any of the\nparticipant emits an event."]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to subscribe to participants when they become ",(0,i.jsx)(n.code,{children:"active"}),", you can do\nso by subscribing to ",(0,i.jsx)(n.code,{children:"meetings.participants.active.on('participantJoined')"})]}),"\n",(0,i.jsx)(n.h3,{id:"participant-joined",children:"Participant joined"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any participant joins the meeting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const joinedParticipants = useDyteSelector(\n  (meeting) => meeting.participants.joined\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"participant-pinned",children:"Participant pinned"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when a participant is pinned / unpinned."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const pinnedParticipants = useDyteSelector(\n  (meeting) => meeting.participants.pinned\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"video-update",children:"Video update"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when the target participant starts / stops video."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const videoEnabled = useDyteSelector(\n  (m) => m.participants.joined.get(participantId).videoEnabled\n);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n### Audio update\n\nTrigger an event when the target participant starts / stops audio.\n\n```ts\nconst audioEnabled = useDyteSelector((m) =>\n  m.participants.joined.get(participantId).audioEnabled\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"screen-share-update",children:"Screen share update"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when the target participant starts / stops screen share."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const screenShareEnabled = useDyteSelector(\n  (m) => m.participants.joined.get(participantId).screenShareEnabled\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Trigger an event when any participant starts / stops screen share."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const screensharingParticipant = useDyteSelector((m) =>\n  m.participants.joined.toArray().find((p) => p.screenShareEnabled)\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"network-quality-score",children:"Network quality score"}),"\n",(0,i.jsxs)(n.p,{children:["Subscribe to the ",(0,i.jsx)(n.code,{children:"mediaScoreUpdate"})," event to monitor network"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"meeting.participants.joined.on(\n  'mediaScoreUpdate',\n  ({ participantId, kind, isScreenshare, score }) => {\n    if (kind === 'video') {\n      console.log(\n        `Participant ${participantId}'s ${\n          isScreenshare ? 'screenshare' : 'video'\n        } quality score is `,\n        score\n      );\n    }\n\n    if (kind === 'audio') {\n      console.log(\n        `Participant ${participantId}'s audio quality score is `,\n        score\n      );\n    }\n\n    if (score < 5) {\n      console.log(`Participant ${participantId}'s media quality is poor`);\n    }\n  }\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"events-for-specific-participant",children:"Events for specific participant"}),"\n",(0,i.jsxs)(n.p,{children:["If you want to subscribe to above events but for a specific participant only,\nyou can do so by binding event to ",(0,i.jsx)(n.code,{children:"meeting.participants.joined.get(peerId).on()"}),"\nmethod. where the ",(0,i.jsx)(n.code,{children:"peerId"})," is the id of the participant that you want to watch."]}),"\n",(0,i.jsx)(n.h3,{id:"webinar-events",children:"Webinar events"}),"\n",(0,i.jsxs)(n.p,{children:["Here is a list of events that can are emitted for a participants in a ",(0,i.jsx)(n.code,{children:"WEBINAR"}),"\nsetup."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Event"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Description"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"peerRequestToJoinStage"})}),(0,i.jsx)(n.td,{children:"Emitted when a user has requested to join the webinar meeting."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"peerRejectedToJoinStage"})}),(0,i.jsx)(n.td,{children:"Emitted when the user's request to join the meeting has been rejected."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"peerAcceptedToJoinStage"})}),(0,i.jsx)(n.td,{children:"Emitted when the user's request to join the meeting has been accepted"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"peerStoppedPresenting"})}),(0,i.jsx)(n.td,{children:"Emitted when a participant stops presenting in the webinar meeting."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"peerStartedPresenting"})}),(0,i.jsx)(n.td,{children:"Emitted when a participant starts presenting in the webinar meeting."})]})]})]}),"\n",(0,i.jsx)(t,{children:(0,i.jsx)("title",{children:"React Web Core Participant Events"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);